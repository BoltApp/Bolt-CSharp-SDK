//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Boltpay.SDK.Models.Components
{
    using Boltpay.SDK.Models.Components;
    using Boltpay.SDK.Utils;
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using System;
    

    public class AddressReferenceInputType
    {
        private AddressReferenceInputType(string value) { Value = value; }

        public string Value { get; private set; }
        
        public static AddressReferenceInputType Id { get { return new AddressReferenceInputType("id"); } }
        public static AddressReferenceInputType Explicit { get { return new AddressReferenceInputType("explicit"); } }
        public static AddressReferenceInputType Null { get { return new AddressReferenceInputType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(AddressReferenceInputType v) { return v.Value; }
        public static AddressReferenceInputType FromString(string v) {
            switch(v) {
                case "id": return Id;
                case "explicit": return Explicit;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for AddressReferenceInputType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((AddressReferenceInputType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(AddressReferenceInput.AddressReferenceInputConverter))]
    public class AddressReferenceInput {
        public AddressReferenceInput(AddressReferenceInputType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public AddressReferenceId? AddressReferenceId { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public AddressReferenceExplicitInput? AddressReferenceExplicitInput { get; set; }

        public AddressReferenceInputType Type { get; set; }


        public static AddressReferenceInput CreateId(AddressReferenceId id) {
            AddressReferenceInputType typ = AddressReferenceInputType.Id;
        
            string typStr = AddressReferenceInputType.Id.ToString();
            
            id.DotTag = AddressReferenceIdTagExtension.ToEnum(AddressReferenceInputType.Id.ToString());
            AddressReferenceInput res = new AddressReferenceInput(typ);
            res.AddressReferenceId = id;
            return res;
        }
        public static AddressReferenceInput CreateExplicit(AddressReferenceExplicitInput explicitT) {
            AddressReferenceInputType typ = AddressReferenceInputType.Explicit;
        
            string typStr = AddressReferenceInputType.Explicit.ToString();
            
            explicitT.DotTag = AddressReferenceExplicitTagExtension.ToEnum(AddressReferenceInputType.Explicit.ToString());
            AddressReferenceInput res = new AddressReferenceInput(typ);
            res.AddressReferenceExplicitInput = explicitT;
            return res;
        }
        public static AddressReferenceInput CreateNull() {
            AddressReferenceInputType typ = AddressReferenceInputType.Null;
            return new AddressReferenceInput(typ);
        }

        public class AddressReferenceInputConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(AddressReferenceInput);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                string discriminator = jo.GetValue(".tag")?.ToString() ?? throw new ArgumentNullException("Could not find discriminator field.");
                if (discriminator == AddressReferenceInputType.Id.ToString())
                {
                    AddressReferenceId? addressReferenceID = ResponseBodyDeserializer.Deserialize<AddressReferenceId>(jo.ToString());
                    return CreateId(addressReferenceID!);
                }
                if (discriminator == AddressReferenceInputType.Explicit.ToString())
                {
                    AddressReferenceExplicitInput? addressReferenceExplicitInput = ResponseBodyDeserializer.Deserialize<AddressReferenceExplicitInput>(jo.ToString());
                    return CreateExplicit(addressReferenceExplicitInput!);
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                AddressReferenceInput res = (AddressReferenceInput)value;
                if (AddressReferenceInputType.FromString(res.Type).Equals(AddressReferenceInputType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.AddressReferenceId != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.AddressReferenceId));
                    return;
                }
                if (res.AddressReferenceExplicitInput != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.AddressReferenceExplicitInput));
                    return;
                }

            }

        }

    }
}