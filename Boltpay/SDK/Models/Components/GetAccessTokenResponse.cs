//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Boltpay.SDK.Models.Components
{
    using Boltpay.SDK.Utils;
    using Newtonsoft.Json;
    
    public class GetAccessTokenResponse
    {

        /// <summary>
        /// A JWT token issued when the request includes the scope open_id.
        /// </summary>
        [JsonProperty("id_token")]
        public string? IdToken { get; set; }

        /// <summary>
        /// An access token you can use to make requests on behalf of a Bolt Account.
        /// </summary>
        [JsonProperty("access_token")]
        public string? AccessToken { get; set; }

        /// <summary>
        /// The access token&apos;s expiration, in seconds.
        /// </summary>
        [JsonProperty("expires_in")]
        public long? ExpiresIn { get; set; }

        /// <summary>
        /// A refresh token you can use to issue a brand new access token without obtaining a new authorization code.
        /// </summary>
        [JsonProperty("refresh_token")]
        public string? RefreshToken { get; set; }

        /// <summary>
        /// The scope granted to the refresh token. Currently, refreshed token will only grant view permissions.
        /// </summary>
        [JsonProperty("refresh_token_scope")]
        public string? RefreshTokenScope { get; set; }

        /// <summary>
        /// The scope granted to access token, depending on the scope granted to the authorization code as well as the scope parameter.<br/>
        /// 
        /// <remarks>
        /// Options include `bolt.account.manage`, `bolt.account.view`, `openid`. Multiple values can be returned as space-separated strings.<br/>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("scope")]
        public string? Scope { get; set; }

        /// <summary>
        /// The token_type will always be bearer.
        /// </summary>
        [JsonProperty("token_type")]
        public string? TokenType { get; set; }
    }
}