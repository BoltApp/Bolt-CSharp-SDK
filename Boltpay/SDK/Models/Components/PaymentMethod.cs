//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Boltpay.SDK.Models.Components
{
    using Boltpay.SDK.Models.Components;
    using Boltpay.SDK.Utils;
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using System;
    

    public class PaymentMethodType
    {
        private PaymentMethodType(string value) { Value = value; }

        public string Value { get; private set; }
        
        public static PaymentMethodType CreditCard { get { return new PaymentMethodType("credit_card"); } }
        public static PaymentMethodType Paypal { get { return new PaymentMethodType("paypal"); } }
        public static PaymentMethodType Affirm { get { return new PaymentMethodType("affirm"); } }
        public static PaymentMethodType Afterpay { get { return new PaymentMethodType("afterpay"); } }
        public static PaymentMethodType Klarna { get { return new PaymentMethodType("klarna"); } }
        public static PaymentMethodType KlarnaAccount { get { return new PaymentMethodType("klarna_account"); } }
        public static PaymentMethodType KlarnaPaynow { get { return new PaymentMethodType("klarna_paynow"); } }
        public static PaymentMethodType Null { get { return new PaymentMethodType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(PaymentMethodType v) { return v.Value; }
        public static PaymentMethodType FromString(string v) {
            switch(v) {
                case "credit_card": return CreditCard;
                case "paypal": return Paypal;
                case "affirm": return Affirm;
                case "afterpay": return Afterpay;
                case "klarna": return Klarna;
                case "klarna_account": return KlarnaAccount;
                case "klarna_paynow": return KlarnaPaynow;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for PaymentMethodType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((PaymentMethodType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(PaymentMethod.PaymentMethodConverter))]
    public class PaymentMethod {
        public PaymentMethod(PaymentMethodType type) {
            Type = type;
        }
        public PaymentMethodCreditCard? PaymentMethodCreditCard { get; set; }
        public PaymentMethodPaypalOutput? PaymentMethodPaypalOutput { get; set; }
        public PaymentMethodAffirmOutput? PaymentMethodAffirmOutput { get; set; }
        public PaymentMethodAfterpayOutput? PaymentMethodAfterpayOutput { get; set; }
        public PaymentMethodKlarnaOutput? PaymentMethodKlarnaOutput { get; set; }
        public PaymentMethodKlarnaAccountOutput? PaymentMethodKlarnaAccountOutput { get; set; }
        public PaymentMethodKlarnaPaynowOutput? PaymentMethodKlarnaPaynowOutput { get; set; }

        public PaymentMethodType Type { get; set; }


        public static PaymentMethod CreateCreditCard(PaymentMethodCreditCard creditCard) {
            PaymentMethodType typ = PaymentMethodType.CreditCard;
        
            string typStr = PaymentMethodType.CreditCard.ToString();
            
            creditCard.DotTag = Models.Components.DotTagExtension.ToEnum(PaymentMethodType.CreditCard.ToString());
            PaymentMethod res = new PaymentMethod(typ);
            res.PaymentMethodCreditCard = creditCard;
            return res;
        }
        public static PaymentMethod CreatePaypal(PaymentMethodPaypalOutput paypal) {
            PaymentMethodType typ = PaymentMethodType.Paypal;
        
            string typStr = PaymentMethodType.Paypal.ToString();
            
            paypal.DotTag = PaymentMethodPaypalTagExtension.ToEnum(PaymentMethodType.Paypal.ToString());
            PaymentMethod res = new PaymentMethod(typ);
            res.PaymentMethodPaypalOutput = paypal;
            return res;
        }
        public static PaymentMethod CreateAffirm(PaymentMethodAffirmOutput affirm) {
            PaymentMethodType typ = PaymentMethodType.Affirm;
        
            string typStr = PaymentMethodType.Affirm.ToString();
            
            affirm.DotTag = PaymentMethodAffirmTagExtension.ToEnum(PaymentMethodType.Affirm.ToString());
            PaymentMethod res = new PaymentMethod(typ);
            res.PaymentMethodAffirmOutput = affirm;
            return res;
        }
        public static PaymentMethod CreateAfterpay(PaymentMethodAfterpayOutput afterpay) {
            PaymentMethodType typ = PaymentMethodType.Afterpay;
        
            string typStr = PaymentMethodType.Afterpay.ToString();
            
            afterpay.DotTag = PaymentMethodAfterpayTagExtension.ToEnum(PaymentMethodType.Afterpay.ToString());
            PaymentMethod res = new PaymentMethod(typ);
            res.PaymentMethodAfterpayOutput = afterpay;
            return res;
        }
        public static PaymentMethod CreateKlarna(PaymentMethodKlarnaOutput klarna) {
            PaymentMethodType typ = PaymentMethodType.Klarna;
        
            string typStr = PaymentMethodType.Klarna.ToString();
            
            klarna.DotTag = PaymentMethodKlarnaTagExtension.ToEnum(PaymentMethodType.Klarna.ToString());
            PaymentMethod res = new PaymentMethod(typ);
            res.PaymentMethodKlarnaOutput = klarna;
            return res;
        }
        public static PaymentMethod CreateKlarnaAccount(PaymentMethodKlarnaAccountOutput klarnaAccount) {
            PaymentMethodType typ = PaymentMethodType.KlarnaAccount;
        
            string typStr = PaymentMethodType.KlarnaAccount.ToString();
            
            klarnaAccount.DotTag = PaymentMethodKlarnaAccountTagExtension.ToEnum(PaymentMethodType.KlarnaAccount.ToString());
            PaymentMethod res = new PaymentMethod(typ);
            res.PaymentMethodKlarnaAccountOutput = klarnaAccount;
            return res;
        }
        public static PaymentMethod CreateKlarnaPaynow(PaymentMethodKlarnaPaynowOutput klarnaPaynow) {
            PaymentMethodType typ = PaymentMethodType.KlarnaPaynow;
        
            string typStr = PaymentMethodType.KlarnaPaynow.ToString();
            
            klarnaPaynow.DotTag = PaymentMethodKlarnaPaynowTagExtension.ToEnum(PaymentMethodType.KlarnaPaynow.ToString());
            PaymentMethod res = new PaymentMethod(typ);
            res.PaymentMethodKlarnaPaynowOutput = klarnaPaynow;
            return res;
        }
        public static PaymentMethod CreateNull() {
            PaymentMethodType typ = PaymentMethodType.Null;
            return new PaymentMethod(typ);
        }

        public class PaymentMethodConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(PaymentMethod);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                string discriminator = jo.GetValue(".tag")?.ToString() ?? throw new ArgumentNullException("Could not find discriminator field.");
                if (discriminator == PaymentMethodType.CreditCard.ToString())
                {
                    PaymentMethodCreditCard? paymentMethodCreditCard = ResponseBodyDeserializer.Deserialize<PaymentMethodCreditCard>(jo.ToString());
                    return CreateCreditCard(paymentMethodCreditCard!);
                }
                if (discriminator == PaymentMethodType.Paypal.ToString())
                {
                    PaymentMethodPaypalOutput? paymentMethodPaypalOutput = ResponseBodyDeserializer.Deserialize<PaymentMethodPaypalOutput>(jo.ToString());
                    return CreatePaypal(paymentMethodPaypalOutput!);
                }
                if (discriminator == PaymentMethodType.Affirm.ToString())
                {
                    PaymentMethodAffirmOutput? paymentMethodAffirmOutput = ResponseBodyDeserializer.Deserialize<PaymentMethodAffirmOutput>(jo.ToString());
                    return CreateAffirm(paymentMethodAffirmOutput!);
                }
                if (discriminator == PaymentMethodType.Afterpay.ToString())
                {
                    PaymentMethodAfterpayOutput? paymentMethodAfterpayOutput = ResponseBodyDeserializer.Deserialize<PaymentMethodAfterpayOutput>(jo.ToString());
                    return CreateAfterpay(paymentMethodAfterpayOutput!);
                }
                if (discriminator == PaymentMethodType.Klarna.ToString())
                {
                    PaymentMethodKlarnaOutput? paymentMethodKlarnaOutput = ResponseBodyDeserializer.Deserialize<PaymentMethodKlarnaOutput>(jo.ToString());
                    return CreateKlarna(paymentMethodKlarnaOutput!);
                }
                if (discriminator == PaymentMethodType.KlarnaAccount.ToString())
                {
                    PaymentMethodKlarnaAccountOutput? paymentMethodKlarnaAccountOutput = ResponseBodyDeserializer.Deserialize<PaymentMethodKlarnaAccountOutput>(jo.ToString());
                    return CreateKlarnaAccount(paymentMethodKlarnaAccountOutput!);
                }
                if (discriminator == PaymentMethodType.KlarnaPaynow.ToString())
                {
                    PaymentMethodKlarnaPaynowOutput? paymentMethodKlarnaPaynowOutput = ResponseBodyDeserializer.Deserialize<PaymentMethodKlarnaPaynowOutput>(jo.ToString());
                    return CreateKlarnaPaynow(paymentMethodKlarnaPaynowOutput!);
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                PaymentMethod res = (PaymentMethod)value;
                if (PaymentMethodType.FromString(res.Type).Equals(PaymentMethodType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.PaymentMethodCreditCard != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.PaymentMethodCreditCard));
                    return;
                }
                if (res.PaymentMethodPaypalOutput != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.PaymentMethodPaypalOutput));
                    return;
                }
                if (res.PaymentMethodAffirmOutput != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.PaymentMethodAffirmOutput));
                    return;
                }
                if (res.PaymentMethodAfterpayOutput != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.PaymentMethodAfterpayOutput));
                    return;
                }
                if (res.PaymentMethodKlarnaOutput != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.PaymentMethodKlarnaOutput));
                    return;
                }
                if (res.PaymentMethodKlarnaAccountOutput != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.PaymentMethodKlarnaAccountOutput));
                    return;
                }
                if (res.PaymentMethodKlarnaPaynowOutput != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.PaymentMethodKlarnaPaynowOutput));
                    return;
                }

            }

        }

    }
}