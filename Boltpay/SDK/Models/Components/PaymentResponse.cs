//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Boltpay.SDK.Models.Components
{
    using Boltpay.SDK.Models.Components;
    using Boltpay.SDK.Utils;
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using System;
    

    public class PaymentResponseType
    {
        private PaymentResponseType(string value) { Value = value; }

        public string Value { get; private set; }
        
        public static PaymentResponseType Finalized { get { return new PaymentResponseType("finalized"); } }
        public static PaymentResponseType Pending { get { return new PaymentResponseType("pending"); } }
        public static PaymentResponseType Null { get { return new PaymentResponseType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(PaymentResponseType v) { return v.Value; }
        public static PaymentResponseType FromString(string v) {
            switch(v) {
                case "finalized": return Finalized;
                case "pending": return Pending;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for PaymentResponseType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((PaymentResponseType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(PaymentResponse.PaymentResponseConverter))]
    public class PaymentResponse {
        public PaymentResponse(PaymentResponseType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public PaymentResponseFinalized? PaymentResponseFinalized { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public PaymentResponsePending? PaymentResponsePending { get; set; }

        public PaymentResponseType Type { get; set; }


        public static PaymentResponse CreateFinalized(PaymentResponseFinalized finalized) {
            PaymentResponseType typ = PaymentResponseType.Finalized;
        
            string typStr = PaymentResponseType.Finalized.ToString();
            
            finalized.DotTag = PaymentResponseFinalizedTagExtension.ToEnum(PaymentResponseType.Finalized.ToString());
            PaymentResponse res = new PaymentResponse(typ);
            res.PaymentResponseFinalized = finalized;
            return res;
        }
        public static PaymentResponse CreatePending(PaymentResponsePending pending) {
            PaymentResponseType typ = PaymentResponseType.Pending;
        
            string typStr = PaymentResponseType.Pending.ToString();
            
            pending.DotTag = PaymentResponsePendingTagExtension.ToEnum(PaymentResponseType.Pending.ToString());
            PaymentResponse res = new PaymentResponse(typ);
            res.PaymentResponsePending = pending;
            return res;
        }
        public static PaymentResponse CreateNull() {
            PaymentResponseType typ = PaymentResponseType.Null;
            return new PaymentResponse(typ);
        }

        public class PaymentResponseConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(PaymentResponse);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                string discriminator = jo.GetValue(".tag")?.ToString() ?? throw new ArgumentNullException("Could not find discriminator field.");
                if (discriminator == PaymentResponseType.Finalized.ToString())
                {
                    PaymentResponseFinalized? paymentResponseFinalized = ResponseBodyDeserializer.Deserialize<PaymentResponseFinalized>(jo.ToString());
                    return CreateFinalized(paymentResponseFinalized!);
                }
                if (discriminator == PaymentResponseType.Pending.ToString())
                {
                    PaymentResponsePending? paymentResponsePending = ResponseBodyDeserializer.Deserialize<PaymentResponsePending>(jo.ToString());
                    return CreatePending(paymentResponsePending!);
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                PaymentResponse res = (PaymentResponse)value;
                if (PaymentResponseType.FromString(res.Type).Equals(PaymentResponseType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.PaymentResponseFinalized != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.PaymentResponseFinalized));
                    return;
                }
                if (res.PaymentResponsePending != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.PaymentResponsePending));
                    return;
                }

            }

        }

    }
}